# =============================================
# üìÖ Â∑•‰ΩúÊµÅÂêçÁß∞ÔºöÊ£ÄÊü• PR ‰∏≠ÁöÑ Markdown Êñá‰ª∂ÁøªËØëÁä∂ÊÄÅ
# ‚úÖ ÊØèÂ§© UTC 10:00 Ëá™Âä®Êâ´Êèè + ÊîØÊåÅÊâãÂä®Ëß¶Âèë
# ‚úÖ Ê£ÄÊü• sources/**/*.md ÊòØÂê¶ status: translating ‰∏îË∂ÖÊúüÔºà30Â§©Ôºâ
# ‚úÖ Ë∂ÖÊúüÂàôÈÄöËøá GitHub Issue Comment Ëß¶ÂèëÈÇÆ‰ª∂ÈÄöÁü•
# =============================================

name: Check PRs for Modified Markdown Files

on:
  schedule:
    - cron: '0 10 * * *'  # ÊØèÂ§© UTC 10:00 Ëá™Âä®ËøêË°å
  workflow_dispatch:      # ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë

permissions:
  pull-requests: write  # ‚ö†Ô∏è ÂøÖÈ°ª‰∏∫ write ÊâçËÉΩËØÑËÆ∫ PR
  contents: read        # ËØªÂèñ‰ªìÂ∫ìÂÜÖÂÆπÔºàÊ£ÄÂá∫‰ª£Á†ÅÔºâ

jobs:
  check-prs:
    runs-on: ubuntu-latest

    steps:
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # üß± Ê≠•È™§ 1ÔºöÊ£ÄÂá∫‰ªìÂ∫ì‰ª£Á†ÅÔºàÂÆåÊï¥ÂéÜÂè≤Ôºâ
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üîç Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # üì¶ Ê≠•È™§ 2ÔºöÂÆâË£Ö yqÔºàÁî®‰∫éËß£Êûê YAML Front MatterÔºâ
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üì¶ Install yq
        run: |
          wget -q https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # ‚úÖ Ê≠•È™§ 3ÔºöÈ™åËØÅ yq ÂÆâË£ÖÊàêÂäü
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: ‚úÖ Verify yq
        run: yq --version

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # üìã Ê≠•È™§ 4ÔºöÂàóÂá∫ÊâÄÊúâ open ÁöÑ Pull Requests
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üìã List open pull requests
        id: list_prs
        run: |
          PRS=$(gh api --paginate \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/pulls?state=open&per_page=100" \
            --jq '[.[].number] | join(" ")')
          
          if [ -z "$PRS" ]; then
            echo "üì≠ Êú™ÊâæÂà∞‰ªª‰Ωï open PR"
            echo "prs=" >> $GITHUB_OUTPUT
          else
            echo "üì¨ ÊâæÂà∞‰ª•‰∏ã PR: $PRS"
            echo "prs=$PRS" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # üì¢ Ê≠•È™§ 5ÔºöËé∑Âèñ‰ªìÂ∫ìÊâÄÊúâËÄÖÔºàÁî®‰∫é @ ÊèêÂèäÔºâ
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üì¢ Get Repository Owner
        id: repo_owner
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            core.setOutput('owner_login', repo.owner);
            console.log(`Repository Owner is: ${repo.owner}`);

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # üîç Ê≠•È™§ 6ÔºöÈÅçÂéÜÊØè‰∏™ PRÔºåÊ£ÄÊü•Ë∂ÖÊúüÊñá‰ª∂Âπ∂Êî∂ÈõÜÈÄöÁü•Êï∞ÊçÆ
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üîç Check overdue files and collect data
        id: check_and_collect
        if: ${{ steps.list_prs.outputs.prs != '' }}
        run: |
          TIMEOUT_DAYS=30
          ALL_ALERTS="[]"

          for pr_number in ${{ steps.list_prs.outputs.prs }}; do
            echo ""
            echo "=== üöÄ Ê≠£Âú®Ê£ÄÊü• PR #$pr_number ==="

            # Ëé∑Âèñ PR Âü∫Êú¨‰ø°ÊÅØ
            PR_INFO=$(gh api "/repos/${{ github.repository }}/pulls/$pr_number")
            PR_AUTHOR=$(echo "$PR_INFO" | jq -r '.user.login')
            PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
            PR_URL=$(echo "$PR_INFO" | jq -r '.html_url')
            BASE_REF=$(echo "$PR_INFO" | jq -r '.base.ref')

            # Â∞ùËØïÊ£ÄÂá∫ PR ÂêàÂπ∂È¢ÑËßàÂàÜÊîØ
            git fetch origin "pull/$pr_number/merge:pr_merge_$pr_number" 2>/dev/null || {
              echo "‚ö†Ô∏è Êó†Ê≥ïËé∑Âèñ PR ÂêàÂπ∂È¢ÑËßàÔºåË∑≥Ëøá„ÄÇ"
              continue
            }
            git checkout -f pr_merge_$pr_number

            # Ëé∑Âèñ PR ‰∏≠‰øÆÊîπÁöÑ sources/**/*.md Êñá‰ª∂
            CHANGED_MD_FILES=$(git diff --name-only "origin/$BASE_REF..HEAD" | grep '^sources/.*\.md$' || true)
            if [ -z "$CHANGED_MD_FILES" ]; then
              echo "‚úÖ PR #$pr_number Êú™‰øÆÊîπ sources/**/*.md Êñá‰ª∂ÔºåË∑≥ËøáÊ£ÄÊü•"
              continue
            fi

            # Ê£ÄÊü•ÊØè‰∏™ Markdown Êñá‰ª∂ÁöÑ Front Matter
            OVERDUE_FILES="[]"
            HAS_OVERDUE=false

            while IFS= read -r file; do
              # ÊèêÂèñ YAML Front MatterÔºà--- ... --- ‰πãÈó¥ÁöÑÂÜÖÂÆπÔºâ
              FRONT_MATTER=$(sed -n '/^---$/,/^---$/{/^---$/!p}' "$file" 2>/dev/null)
              [ -z "$FRONT_MATTER" ] && continue

              TEMP_YAML="/tmp/frontmatter_$$.yaml"
              echo "$FRONT_MATTER" > "$TEMP_YAML"

              STATUS=$(yq eval '.status // ""' "$TEMP_YAML" 2>/dev/null)
              TRANSLATING_DATE=$(yq eval '.translating_date // ""' "$TEMP_YAML" 2>/dev/null)

              if [ "$STATUS" = "translating" ]; then
                OVERDUE_INFO="Êó†"
                DAY_DIFF=0

                if [ -z "$TRANSLATING_DATE" ]; then
                  OVERDUE_INFO="Áº∫Â∞ë translating_date Â≠óÊÆµ"
                  HAS_OVERDUE=true
                else
                  DATE_STR=$(echo "$TRANSLATING_DATE" | sed 's|/|-|g')
                  if ! TRANSLATING_TS=$(date -d "$DATE_STR" +%s 2>/dev/null); then
                    OVERDUE_INFO="Êó•ÊúüÊ†ºÂºèÈîôËØØ: $TRANSLATING_DATE"
                    HAS_OVERDUE=true
                  else
                    TODAY_TS=$(date +%s)
                    DAY_DIFF=$(( (TODAY_TS - TRANSLATING_TS) / 86400 ))
                    if [ $DAY_DIFF -gt $TIMEOUT_DAYS ]; then
                      OVERDUE_INFO="üö® Â∑≤Ë∂ÖÊúü ${DAY_DIFF} Â§©"
                      HAS_OVERDUE=true
                    fi
                  fi
                fi

                if [ "$HAS_OVERDUE" = true ]; then
                  FILE_JSON=$(jq -n \
                    --arg file "$file" \
                    --arg info "$OVERDUE_INFO" \
                    --argjson days $DAY_DIFF \
                    '{file: $file, info: $info, days: $days}')
                  OVERDUE_FILES=$(echo "$OVERDUE_FILES" | jq ". + [$FILE_JSON]")
                fi
              fi
            done <<< "$CHANGED_MD_FILES"

            # Ëã•Â≠òÂú®Ë∂ÖÊúüÊñá‰ª∂ÔºåËÆ∞ÂΩïËØ• PR ÁöÑÂëäË≠¶‰ø°ÊÅØ
            if echo "$OVERDUE_FILES" | jq -e '. | length > 0' >/dev/null; then
              PR_ALERT=$(jq -n \
                --arg pr_number "$pr_number" \
                --arg author "$PR_AUTHOR" \
                --arg title "$PR_TITLE" \
                --arg url "$PR_URL" \
                --argjson files "$OVERDUE_FILES" \
                '{pr_number: ($pr_number|tonumber), author: $author, title: $title, url: $url, files: $files}')
              
              ALL_ALERTS=$(echo "$ALL_ALERTS" | jq ". + [$PR_ALERT]")
              echo "üö® PR #$pr_number ÂèëÁé∞Ë∂ÖÊúüÊñá‰ª∂ÔºåÂ∑≤Êî∂ÈõÜÊï∞ÊçÆ„ÄÇ"
            else
              echo "üéâ PR #$pr_number Êñá‰ª∂ÂÖÉÊï∞ÊçÆÁ¨¶ÂêàËßÑËåÉÔºÅ"
            fi

            # ÂàáÂõûÂéüÂàÜÊîØÔºåÊ∏ÖÁêÜ‰∏¥Êó∂Áä∂ÊÄÅ
            git checkout -f "origin/$BASE_REF" 2>/dev/null || true
            echo "------------------------------"
          done

          echo "all_alerts=$ALL_ALERTS" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # üì¢ Ê≠•È™§ 7ÔºöÂèëÈÄÅ GitHub ËØÑËÆ∫ÔºàËß¶ÂèëÈÇÆ‰ª∂ÈÄöÁü•Ôºâ
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üì¢ Send Email Alert via GitHub Comment
        uses: actions/github-script@v7
        if: ${{ steps.check_and_collect.outputs.all_alerts != '[]' }}
        with:
          script: |
            const alerts = JSON.parse(core.getInput('alerts'));
            const repoOwner = core.getInput('repo_owner');

            for (const alert of alerts) {
              const prNumber = alert.pr_number;
              const author = alert.author;
              const files = alert.files.sort((a, b) => b.days - a.days); // ÊåâË∂ÖÊúüÂ§©Êï∞ÂÄíÂ∫è

              // ÊûÑÈÄ†Êñá‰ª∂ÂàóË°® Markdown Ë°®Ê†º
              let fileListMarkdown = "| Êñá‰ª∂Ë∑ØÂæÑ | Ë∂ÖÊúüÁä∂ÊÄÅ |\n";
              fileListMarkdown += "| :--- | :--- |\n";
              files.forEach(file => {
                fileListMarkdown += `| \`${file.file}\` | ${file.info} |\n`;
              });

              // ÊûÑÈÄ†ÂÆåÊï¥ËØÑËÆ∫ÂÜÖÂÆπ
              const commentBody = `## üö® ÁøªËØëË∂ÖÊúüÊèêÈÜí [PR #${prNumber}]
              
              **ËØ∑Ê≥®ÊÑèÔºö** PR ‰∏≠ÁöÑÊüê‰∫õ Markdown Êñá‰ª∂ÁøªËØëÁä∂ÊÄÅÂ∑≤Ë∂ÖÊúüÔºåËØ∑ÂèäÊó∂Â§ÑÁêÜ„ÄÇ
              
            - **PR Ê†áÈ¢ò**: ${alert.title}
            - **PR ÈìæÊé•**: [üîó ÁÇπÂáªÊü•Áúã](${alert.url})
            - **ÈÄöÁü•ÂØπË±°**: @${author}ÔºàPR ‰ΩúËÄÖÔºâÂíå @${repoOwner}Ôºà‰ªìÂ∫ìÊâÄÊúâËÄÖÔºâ

            ### ‚ö†Ô∏è Ë∂ÖÊúüÊñá‰ª∂ÂàóË°®
            ${fileListMarkdown}

            ---
            Ê≠§ÈÄöÁü•Áî± [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) Â∑•‰ΩúÊµÅÊØèÊó•Ëá™Âä®ÂèëÈÄÅ„ÄÇ_`;

              // ÂèëÈÄÅËØÑËÆ∫ÔºàËá™Âä®Ëß¶Âèë GitHub ÈÇÆ‰ª∂Ôºâ
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });

              console.log(`‚úÖ Â∑≤Âêë PR #${prNumber} ÂèëÈÄÅË∂ÖÊúüÈÄöÁü•Ôºå@‰∫Ü ${author} Âíå ${repoOwner}`);
            }
        env:
          alerts: ${{ steps.check_and_collect.outputs.all_alerts }}
          repo_owner: ${{ steps.repo_owner.outputs.owner_login }}