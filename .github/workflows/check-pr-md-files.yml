name: Check PRs for Modified Markdown Files

on:
  schedule:
    - cron: '0 10 * * *'
  workflow_dispatch:

permissions:
  pull-requests: read
  contents: read

jobs:
  check-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List open pull requests
        id: list_prs
        run: |
          PRS=$(gh api --paginate \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/pulls?state=open&per_page=100" \
            --jq '.[].number')
          if [ -z "$PRS" ]; then
            echo "No open PRs found."
            echo "prs=" >> $GITHUB_OUTPUT
          else
            echo "Found PRs: $PRS"
            echo "prs=$PRS" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install yq (direct download)
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Verify yq installation
        run: |
          yq --version

      - name: Process each PR
        if: ${{ steps.list_prs.outputs.prs != '' }}
        run: |
          IFS=$'\n'
          for pr_number in ${{ steps.list_prs.outputs.prs }}; do
            echo "=== Checking PR #$pr_number ==="
            BASE_REF=$(gh api "/repos/${{ github.repository }}/pulls/$pr_number" --jq '.base.ref')
            echo "Base branch: $BASE_REF"

            # 获取 PR 合并预览
            git fetch origin "pull/$pr_number/merge:pr_merge_$pr_number" 2>/dev/null || {
              echo "⚠️ 无法获取 PR 合并预览，可能冲突或尚未准备好。跳过此 PR。"
              continue
            }
            git checkout pr_merge_$pr_number

            # 检查是否修改了 sources/**/*.md
            CHANGED_MD_FILES=$(git diff --name-only "origin/$BASE_REF..HEAD" -- 'sources/**/*.md' 2>/dev/null)
            if [ -z "$CHANGED_MD_FILES" ]; then
              echo "❌ PR #$pr_number 未修改 sources/**/*.md 文件"
              echo "------------------------------"
              continue
            fi

            echo "✅ PR #$pr_number 修改了以下 Markdown 文件："
            echo "$CHANGED_MD_FILES"

            # 遍历每个修改的 Markdown 文件，检查元数据
            HAS_ERROR=false
            while IFS= read -r file; do
              if [ ! -f "$file" ]; then
                echo "⚠️ 文件不存在: $file"
                continue
              fi

              # 提取 YAML Front Matter (假设是 --- 开头和结尾的)
              FRONT_MATTER=$(sed -n '/^---$/,/^---$/{/^---$/!p}' "$file" 2>/dev/null)
              if [ -z "$FRONT_MATTER" ]; then
                echo "⚠️ $file 没有 YAML Front Matter"
                HAS_ERROR=true
                continue
              fi

              # 创建临时 YAML 文件供 yq 解析
              TEMP_YAML=$(mktemp)
              echo "$FRONT_MATTER" > "$TEMP_YAML"

              # 检查 status 字段
              STATUS=$(yq eval '.status' "$TEMP_YAML" 2>/dev/null)

              if [ "$STATUS" = "translating" ]; then
                # 只有 status 是 translating 时，才检查 translating_date
                TRANSLATING_DATE=$(yq eval '.translating_date' "$TEMP_YAML" 2>/dev/null)
                if [ -z "$TRANSLATING_DATE" ]; then
                  echo "❌ $file: 缺少 translating_date 字段（status 为 translating 时必须提供）"
                  HAS_ERROR=true
                else
                  # 验证格式
                  if ! date -d "$TRANSLATING_DATE" "+%Y-%m-%d" >/dev/null 2>&1; then
                    echo "❌ $file: translating_date 格式错误，应为 YYYY-MM-DD，当前值: '$TRANSLATING_DATE'"
                    HAS_ERROR=true
                  else
                    # 计算天数差（今天 - translating_date）
                    TRANSLATING_TS=$(date -d "$TRANSLATING_DATE" +%s)
                    TODAY_TS=$(date +%s)
                    DAY_DIFF=$(( (TODAY_TS - TRANSLATING_TS) / 86400 )) # 86400 = 24*60*60

                    if [ $DAY_DIFF -gt 1 ]; then
                      echo "🚨 $file: translating_date 距今已超过 1 天（当前：$DAY_DIFF 天前）"
                      HAS_ERROR=true
                    else
                      echo "✅ $file: translating_date 在 1 天内，符合要求"
                    fi
                  fi
                fi
              else
                echo "ℹ️ $file: status 不是 'translating'，跳过 translating_date 检查"
              fi

              rm -f "$TEMP_YAML"
            done <<< "$CHANGED_MD_FILES"

            if [ "$HAS_ERROR" = true ]; then
              echo "🚨 此 PR 存在元数据问题，请修正！"
            else
              echo "🎉 此 PR 所有 Markdown 文件元数据符合规范！"
            fi

            echo "------------------------------"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}