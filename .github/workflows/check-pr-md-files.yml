# =============================================
# 📅 工作流名称：检查 PR 中的 Markdown 文件翻译状态
# ✅ 每天 UTC 10:00 自动扫描 + 支持手动触发
# ✅ 检查 sources/**/*.md 是否 status: translating 且超期
# ✅ 超期则通过飞书机器人发送提醒卡片（美化版）
# =============================================

name: Check PRs for Modified Markdown Files

on:
  schedule:
    - cron: '0 10 * * *'  # 每天 UTC 10:00
  workflow_dispatch:       # 允许手动触发

permissions:
  pull-requests: read
  contents: read

jobs:
  check-prs:
    runs-on: ubuntu-latest
    steps:

      # 🧱 步骤 1：检出代码（浅克隆即可）
      - name: 🔍 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 需要完整历史用于 git show

      # 💾 步骤 2：缓存 Python 依赖和 yq（加速后续运行）
      - name: 💾 Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            /usr/local/bin/yq
          key: ${{ runner.os }}-deps-v2

      # 🐍 步骤 3：安装 Python 依赖（如果未缓存）
      - name: 🐍 Install Python dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          pip install --user requests python-dotenv

      # 📦 步骤 4：安装 yq（如果未缓存）
      - name: 📦 Install yq
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          wget -q https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      # ✅ 步骤 5：验证安装
      - name: ✅ Verify installations
        run: |
          python3 --version
          pip --version
          yq --version

      # 📋 步骤 6：列出所有 open PR
      - name: 📋 List open pull requests
        id: list_prs
        run: |
          PRS=$(gh api --paginate \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/pulls?state=open&per_page=100" \
            --jq '[.[].number] | join(" ")')
          if [ -z "$PRS" ]; then
            echo "📭 没有找到任何 open PR"
            echo "prs=" >> $GITHUB_OUTPUT
          else
            echo "📬 找到以下 PR: $PRS"
            echo "prs=$PRS" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 🔍 步骤 7：遍历每个 PR，检查超期文件（优化版）
      - name: 🔍 Process each PR and send Feishu alert if needed
        if: ${{ steps.list_prs.outputs.prs != '' }}
        run: |
          # 创建安全临时目录
          TEMP_DIR=$(mktemp -d)
          trap 'rm -rf "$TEMP_DIR"' EXIT

          # 🔄 遍历所有 PR 编号
          for pr_number in ${{ steps.list_prs.outputs.prs }}; do
            echo ""
            echo "=== 🚀 正在检查 PR #$pr_number ==="

            # 🌐 获取 PR 详细信息
            PR_INFO=$(gh api "/repos/${{ github.repository }}/pulls/$pr_number")
            PR_URL=$(echo "$PR_INFO" | jq -r '.html_url')
            PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
            PR_AUTHOR=$(echo "$PR_INFO" | jq -r '.user.login')
            BASE_REF=$(echo "$PR_INFO" | jq -r '.base.ref')

            echo "📌 标题: $PR_TITLE"
            echo "👤 作者: @$PR_AUTHOR"
            echo "🎯 目标分支: $BASE_REF"

            # 📄 获取 PR 中修改的 sources/**/*.md 文件列表
            CHANGED_MD_FILES=$(git diff --name-only "origin/$BASE_REF..refs/pull/$pr_number/merge" -- 'sources/**/*.md' 2>/dev/null || true)
            if [ -z "$CHANGED_MD_FILES" ]; then
              echo "✅ PR #$pr_number 未修改 sources/**/*.md 文件，跳过检查"
              echo "------------------------------"
              continue
            fi

            echo "📝 修改了以下 Markdown 文件："
            echo "$CHANGED_MD_FILES"

            # 📖 初始化 JSON 数组
            JSON_LIST="[]"
            HAS_ERROR=false

            # 📖 逐个检查文件
            while IFS= read -r file; do
              # 安全路径处理
              SAFE_FILE=$(realpath -m "$file" 2>/dev/null)
              if [[ ! "$SAFE_FILE" =~ ^$PWD/ ]]; then
                echo "⚠️ 路径越权: $file"
                continue
              fi

              if [ ! -f "$SAFE_FILE" ]; then
                # 使用 git show 查看文件在 PR 中的内容（无需 checkout）
                FILE_CONTENT=$(git show "refs/pull/$pr_number/merge:$file" 2>/dev/null || true)
                if [ -z "$FILE_CONTENT" ]; then
                  echo "⚠️ 文件在 PR 中不存在或无法读取: $file"
                  continue
                fi
              else
                FILE_CONTENT=$(cat "$SAFE_FILE")
              fi

              # 🧾 提取 YAML Front Matter（--- 之间的部分）
              FRONT_MATTER=$(echo "$FILE_CONTENT" | sed -n '/^---$/,/^---$/{/^---$/!p}')

              if [ -z "$FRONT_MATTER" ]; then
                echo "⚠️ $file 没有 YAML Front Matter"
                continue
              fi

              # 🗃️ 创建临时 YAML 文件
              TEMP_YAML="$TEMP_DIR/frontmatter_$$.yaml"
              echo "$FRONT_MATTER" > "$TEMP_YAML"

              # 🎯 提取字段
              STATUS=$(yq eval '.status // ""' "$TEMP_YAML" 2>/dev/null)
              TRANSLATING_DATE=$(yq eval '.translating_date // ""' "$TEMP_YAML" 2>/dev/null)

              # 🔍 只检查 status: translating
              if [ "$STATUS" = "translating" ]; then
                if [ -z "$TRANSLATING_DATE" ]; then
                  ITEM=$(jq -nc --arg file "$file" --arg reason "缺少 translating_date 字段" --arg pr "$PR_URL" --arg author "@$PR_AUTHOR" \
                    '{文件: $file, 超期: $reason, "PR链接": $pr, 作者: $author}')
                  JSON_LIST=$(echo "$JSON_LIST" | jq ". + [$ITEM]")
                  HAS_ERROR=true
                  echo "❌ $file: 缺少 translating_date 字段"
                else
                  # 📅 容错解析日期（支持 2025-04-01 或 2025/04/01）
                  DATE_STR=$(echo "$TRANSLATING_DATE" | sed 's|/|-|g')
                  if ! TRANSLATING_TS=$(date -d "$DATE_STR" +%s 2>/dev/null); then
                    ITEM=$(jq -nc --arg file "$file" --arg reason "日期格式错误: $TRANSLATING_DATE" --arg pr "$PR_URL" --arg author "@$PR_AUTHOR" \
                      '{文件: $file, 超期: $reason, "PR链接": $pr, 作者: $author}')
                    JSON_LIST=$(echo "$JSON_LIST" | jq ". + [$ITEM]")
                    HAS_ERROR=true
                    echo "❌ $file: translating_date 格式错误: '$TRANSLATING_DATE'"
                  else
                    TODAY_TS=$(date +%s)
                    DAY_DIFF=$(( (TODAY_TS - TRANSLATING_TS) / 86400 ))
                    if [ $DAY_DIFF -gt 1 ]; then
                      ITEM=$(jq -nc --arg file "$file" --arg days "$DAY_DIFF" --arg date "$DATE_STR" --arg pr "$PR_URL" --arg author "@$PR_AUTHOR" \
                        '{文件: $file, 超期: ($days | tonumber | "\u{1F6A8} \(. ) 天前 (\($date))"), "PR链接": $pr, 作者: $author}')
                      JSON_LIST=$(echo "$JSON_LIST" | jq ". + [$ITEM]")
                      HAS_ERROR=true
                      echo "🚨 $file: translating_date 超过 1 天（$DAY_DIFF 天前）"
                    else
                      echo "✅ $file: translating_date 在 1 天内"
                    fi
                  fi
                fi
              else
                echo "ℹ️ $file: status 不是 'translating'，跳过检查"
              fi

            done <<< "$CHANGED_MD_FILES"

            # 🚨 如果有超期文件，发送飞书通知
            if [ "$HAS_ERROR" = true ]; then
              echo "🚨 此 PR 存在元数据问题，准备发送飞书通知..."

              # 🧹 清理并排序（按超期天数倒序）
              SORTED_JSON=$(echo "$JSON_LIST" | jq '
                map(.超期_days = (.超期 | capture("^(?<days>\\d+)").days | tonumber // 0)) |
                sort_by(.超期_days) |
                reverse |
                map(del(.超期_days))
              ')

              # ✅ 确保脚本可执行
              chmod +x .scripts/feishu.py

              # 📤 发送飞书卡片
              echo "$SORTED_JSON" | .scripts/feishu.py \
                -t "🚨 翻译超期提醒 [PR #$pr_number]" \
                -H "**📄 PR 标题**: $PR_TITLE\n**👤 作者**: @$PR_AUTHOR\n\n**⚠️ 以下文件翻译状态已超期，请及时处理**" \
                -c "red" \
                --link-fields "PR链接" \
                --compact

              echo "✅ 飞书通知已发送。"
            else
              echo "🎉 此 PR 所有 Markdown 文件元数据符合规范！"
            fi

            echo "------------------------------"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FEISHU_WEBHOOK_URL: ${{ secrets.FEISHU_WEBHOOK_URL }}