name: Check Article Validity

on:
  pull_request:
    branches:
      - master
    paths:
      - 'sources/**.md'

jobs:
  check-article:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for accurate diffing
          fetch-depth: 0 
          
      - name: Install yq
        run: |
          # Install yq - a lightweight and portable command-line YAML processor
          sudo snap install yq
          
      # ⚠️ 注意: 由于你在脚本中使用了 `yq -f extract ...`，
      # 我假设你需要一个名为 `extract` 的脚本或函数来提取 front matter。
      # 为简化，我将整个 check 逻辑放在一个 run 块中，并在开头定义一个
      # 辅助函数来提取 YAML front matter 值，代替你的 `yq -f extract`。

      - name: Get Diff
        id: git-diff-action
        # This action generates a JSON file with diff details
        uses: GrantBirki/git-diff-action@v2.7.0
        with:
          json_diff_file_output: diff.json
          file_output_only: true
          
      - name: Run Article Checks
        env:
          DIFF_JSON: ${{ steps.git-diff-action.outputs.json-diff-path }}
          ACTOR_ID: ${{ github.actor }}
          
        run: |
          #!/bin/bash
          
          set -e 
          
          # 🚨 模拟你的 `yq -f extract .key` 行为
          # 因为 GitHub Runner 中默认没有这个提取脚本。
          # 这里定义一个 Bash 函数来从 YAML front matter 中提取值。
          # 它会查找以 `key: ` 开头的行。
          yq_extract() {
            local KEY="$1"
            local FILE="$2"
            # 使用 grep/sed/awk 提取 YAML front matter 中的值
            # 这是一个简化的实现，假设 front matter 格式简单。
            # 更健壮的方式是安装 yq 或其他 YAML 解析工具。
            
            # 使用 yq 命令（假设已安装）
            # `yq e` 是 `yq` 的标准用法
            yq e ".$KEY" "$FILE" | sed 's/^"//;s/"$//'
          }
          
          # Get valid files in git diff (markdown files in sources/)
          get_diff_article_files() {
            # 这里的 yq 命令需要解析 GrantBirki/git-diff-action 的输出 JSON
            ARTICLES=$(yq e '.files[].path | select(. | endswith(".md"))' $DIFF_JSON)
            
            if [ -z "$ARTICLES" ]; then
              echo "No valid articles found in the PR. Skip checks."
              exit 0
            fi
            # 移除前面定义的 ARTICLES 变量，用新的 FILES 变量代替
            # 确保 FILES 在全局可用
            FILES="$ARTICLES"
          }
          
          # Check if filename format is valid (lower case letters and hyphens only)
          check_filename_format() {
            local ARTICLE_PATH="$1"
            FILENAME=$(basename "$ARTICLE_PATH" .md)
            if [[ ! "$FILENAME" =~ ^[a-z0-9]+(-[a-z0-9]+)*$ ]]; then
              ERROR=$ERROR"Invalid filename format. Filename should only contain lowercase letters, numbers, and hyphens; "
            fi
          }
          
          # Check if published_date is in the front matter
          check_published() {
            local PUBLISHED_ARTICLE="$1"
            PUBLISHER=$(yq_extract 'publisher' $PUBLISHED_ARTICLE)
            PUBLISHED_DATE=$(yq_extract 'published_date' $PUBLISHED_ARTICLE)
            
            if [ "$PUBLISHER" == "null" ] || [ "$PUBLISHED_DATE" == "null" ]; then
              ERROR=$ERROR"Missing metadata in publisher/published_date; "
            # Comment this check since it's good to give a last chance for people
            # to fix some minor issues missed in the previous stages
            # else
            #    # No stage check needed for the final stage
            #    if [ "$PUBLISHER" != "$ACTOR_ID" ]; then
            #       ERROR=$ERROR"Publisher is not the same as the PR opener; "
            #    fi
            fi
          }
          
          # Check if proofread_date is in the front matter
          check_proofread() {
            local PROOFREAD_ARTICLE="$1"
            PROOFREAD_DATE=$(yq_extract 'proofread_date' $PROOFREAD_ARTICLE)
            
            if [ "$PROOFREAD_DATE" == "null" ]; then
              ERROR=$ERROR"Missing metadata in proofread_date; "
            else
              # Check if proofread_date is earlier than published_date
              PUBLISHED_DATE=$(yq_extract 'published_date' $PROOFREAD_ARTICLE)
              # 注意: 假设日期格式是可比较的整数或 YYYYMMDD 格式
              if [ ! "$PUBLISHED_DATE" == "null" ] && [ "$PUBLISHED_DATE" -lt "$PROOFREAD_DATE" ]; then
                ERROR=$ERROR"Published date is earlier than proofread date; "
              fi
            fi
          }
          
          # Check if proofreader is in the front matter for proofreading/proofread stage,
          # and check if proofreader is the same as the PR opener in proofreading/proofread stage
          check_proofreading() {
            local PROOFREADING_ARTICLE="$1"
            PROOFREADER=$(yq_extract 'proofreader' $PROOFREADING_ARTICLE)
            
            if [ "$PROOFREADER" == "null" ]; then
              ERROR=$ERROR"Missing metadata in proofreader; "
            else
              if [ "$STATUS" == "proofreading" ] || [ "$STATUS" == "proofread" ]; then
                if [ "$PROOFREADER" != "$ACTOR_ID" ]; then
                  ERROR=$ERROR"Proofreader is not the same as the PR opener; "
                fi
              fi
            fi
          }
          
          # Check if translated_date is in the front matter
          check_translated() {
            local TRANSLATED_ARTICLE="$1"
            TRANSLATED_DATE=$(yq_extract 'translated_date' $TRANSLATED_ARTICLE)
            
            if [ "$TRANSLATED_DATE" == "null" ]; then
              ERROR=$ERROR"Missing metadata in translated_date; "
            else
              # Check if translated_date is earlier than proofread_date
              PROOFREAD_DATE=$(yq_extract 'proofread_date' $TRANSLATED_ARTICLE)
              if [ ! "$PROOFREAD_DATE" == "null" ] && [ "$PROOFREAD_DATE" -lt "$TRANSLATED_DATE" ]; then
                ERROR=$ERROR"Proofread date is earlier than translated date; "
              fi
            fi
          }
          
          # Check if translator is in the front matter for translating/translated stage,
          # and check if translator is the same as the PR opener in translating/translated stage
          check_translating() {
            local TRANSLATING_ARTICLE="$1"
            TRANSLATOR=$(yq_extract 'translator' $TRANSLATING_ARTICLE)
            TRANSLATING_DATE=$(yq_extract 'translating_date' $TRANSLATING_ARTICLE)
            
            if [ "$TRANSLATOR" == "null" ]; then
              ERROR=$ERROR"Missing metadata in translator; "
            else
              if [ "$STATUS" == "translating" ] || [ "$STATUS" == "translated" ]; then
                COLLECTED_DATE=$(yq_extract 'collected_date' $TRANSLATING_ARTICLE)
                if [ ! "$TRANSLATING_DATE" == "null" ] && [ "$TRANSLATING_DATE" -lt "$COLLECTED_DATE" ]; then
                  ERROR=$ERROR"Translating date is earlier than collected date;"
                elif [ "$TRANSLATOR" != "$ACTOR_ID" ]; then
                  ERROR=$ERROR"Translator is not the same as the PR opener; "
                fi
              fi
            fi
          }
          
          # Check if collected_date, collector, title, and author are in the front matter,
          # and check if collector is the same as the PR opener in collected stage
          check_collected() {
            local COLLECTED_ARTICLE="$1"
            TITLE=$(yq_extract 'title' $COLLECTED_ARTICLE)
            AUTHOR=$(yq_extract 'author' $COLLECTED_ARTICLE)
            COLLECTOR=$(yq_extract 'collector' $COLLECTED_ARTICLE)
            COLLECTED_DATE=$(yq_extract 'collected_date' $COLLECTED_ARTICLE)
            LINK=$(yq_extract 'link' $COLLECTED_ARTICLE)
            
            if [ "$TITLE" == "null" ] || [ "$AUTHOR" == "null" ] || [ "$COLLECTOR" == "null" ] || [ "$COLLECTED_DATE" == "null" ] || [ "$LINK" == "null" ]; then
              ERROR=$ERROR"Missing metadata in title/author/collector/collected_date/link; "
            else
              # Check if collected_date is earlier than translated_date
              TRANSLATED_DATE=$(yq_extract 'translated_date' $COLLECTED_ARTICLE)
              if [ ! "$TRANSLATED_DATE" == "null" ] && [ "$TRANSLATED_DATE" -lt "$COLLECTED_DATE" ]; then
                ERROR=$ERROR"Translated date is earlier than collected date; "
              fi
              if [ "$STATUS" == "collected" ]; then
                if [ "$COLLECTOR" != "$ACTOR_ID" ]; then
                  ERROR=$ERROR"Collector is not the same as the PR opener; "
                fi
              fi
            fi
          }
          
          CHECK_PASSED=1 # To check if all the articles pass
          get_diff_article_files
          
          # 使用 FILES 变量，而不是旧的 ARTICLES 变量
          for ARTICLE in $FILES; do
            echo "Checking article: $ARTICLE"
            ERROR=""
            # Add the new filename format check
            check_filename_format $ARTICLE
          
            STATUS=$(yq_extract 'status' $ARTICLE)
            
            case $STATUS in
              "published")
                check_published $ARTICLE
                ;& # Fallthrough to ensure low stage checks will run on articles in higher stages
              "proofread")
                check_proofread $ARTICLE
                ;&
              "proofreading")
                check_proofreading $ARTICLE
                ;&
              "translated")
                check_translated $ARTICLE
                ;&
              "translating")
                check_translating $ARTICLE
                ;&
              "collected")
                check_collected $ARTICLE
                ;;
              *)
                ERROR=$ERROR"Invalid status: $STATUS"
                ;;
            esac
            
            # Printlog for each article
            if [ -z "$ERROR" ]; then
              echo "  ✨ All checks passed for $STATUS $ARTICLE"
            else
              echo "  😭 Some checks failed for $STATUS $ARTICLE: $ERROR"
              CHECK_PASSED=0
            fi
          done
          
          # Print overall result
          if [ $CHECK_PASSED -eq 0 ]; then
            echo "❌ Some checks failed. Please fix the article(s) before merging the PR."
            exit 1
          else
            echo "✅ All checks passed. You can merge the PR now."
            exit 0
          fi
